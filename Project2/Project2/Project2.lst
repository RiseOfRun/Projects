Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/23/17 01:05:56
main.asm						     Page 1 - 1


				.386
				.model flat, stdcall
				; прототипы внешних процедур описываются директивой extrn,
				; после знака @ указывается общая длина передаваемых параметров,
				; после двоеточия указывается дистанция «ближняя» – near
				extrn GetStdHandle@4:near
				extrn WriteConsoleA@20:near
				extrn CharToOemA@8:near
				extrn ReadConsoleA@20:near
				extrn ExitProcess@4:near ; функция выхода из программы
				extrn lstrlenA@4:near ; функция определения длины строки
				; сегмент данных
 00000000			.data
 00000000 00000000		dout dd ? ; дескриптор вывода (директива dd резервирует память объемом 32 бита (4 байта))
 00000004 00000000		din dd ? ; дескриптор ввода
 00000008 E2 E2 E5 E4 E8	strn db "введите число: ",13,10,0 ; выводимая строка,
	   F2 E5 20 F7 E8
	   F1 EB EE 3A 20
	   0D 0A 00
				; управляющие символы: 13 – возврат каретки, 10 – переход на новую строку, 0 – конец строки
				; (с использованием директивы db резервируется массив байтов)
 0000001A  000000C8 [		buf db 200 dup (?); буфер для вводимых/выводимых строк
	    00
	   ]
 000000E2 00000000		lens dd ? ; количество выведенных символов
				;два вводимых числа
 000000E6 00000000		numa dd ?
 000000EA 00000000		numb dd ?
				; сегмент кода
 00000000			.code
 00000000			start: ; метка точки входа (завершается двоеточием)


 00000000  B8 0000002A		mov eax, 42
 00000005  50			push eax
 00000006  5B			pop ebx

				; перекодируем строку strn
 00000007  68 00000008 R	push offset strn ; параметры функции помещаются в стек командой
				; offset – операция, возвращающая смещение
 0000000C  68 00000008 R	push offset strn
 00000011  E8 00000000 E	call CharToOemA@8 ; вызов функции

				; получим дескриптор ввода
 00000016  6A F6		push -10
 00000018  E8 00000000 E	call GetStdHandle@4
 0000001D  A3 00000004 R	mov din, eax ; переместить результат из регистра eax в ячейку памяти с именем din

				; получим дескриптор вывода
 00000022  6A F5		push -11
 00000024  E8 00000000 E	call GetStdHandle@4
 00000029  A3 00000000 R	mov dout, eax

				; вывод строки
 0000002E  68 00000008 R	push offset strn ; в стек помещается указатель на строку
 00000033  E8 00000000 E	call lstrlenA@4 ; длина в eax

				; вызов функции writeconsolea для вывода строки strn
 00000038  6A 00		push 0 ; в стек помещается 5-й параметр
 0000003A  68 000000E2 R	push offset lens ; 4-й параметр
 0000003F  50			push eax ; 3-й параметр
 00000040  68 00000008 R	push offset strn ; 2-й параметр
 00000045  FF 35 00000000 R	push dout ; 1-й параметр
 0000004B  E8 00000000 E	call WriteConsoleA@20

 00000050			reenterA:
				; ввод строки
 00000050  6A 00		push 0 ; в стек помещается 5-й параметр
 00000052  68 000000E2 R	push offset lens ; 4-й параметр
 00000057  68 000000C8		push 200 ; 3-й параметр
 0000005C  68 0000001A R	push offset buf ; 2-й параметр
 00000061  FF 35 00000004 R	push din ; 1-й параметр
 00000067  E8 00000000 E	call ReadConsoleA@20

 0000006C  83 3D 000000E2 R	cmp lens, 5
	   05
 00000073  7C DB		jl reenterA

				; обработка 1 строки
 00000075  68 0000001A R	push offset buf
 0000007A  83 2D 000000E2 R	sub lens, 2
	   02
 00000081  8B 0D 000000E2 R	mov ecx, lens
 00000087  BE 0000001A R	mov esi,offset buf ; начало строки хранится в переменной buf
 0000008C  33 DB		xor ebx,ebx ; очистить ebx
 0000008E  33 C0		xor eax,eax ; очистить eax
 00000090			convert: ; метка начала цикла
 00000090  BA 0000000A		mov edx, 10 ; на это число будем умножать, делаем в цикле т.к. при умножении dx затирается
 00000095  8A 1E		mov bl, [esi] ; помещаем символ из введенной строки в bl
 00000097  80 EB 30		sub bl, '0' ; вычитаем из введенного символа код нуля
 0000009A  F7 E2		mul edx ; умножаем старое значение ax на 10, результат – в ax
 0000009C  03 C3		add eax, ebx ; добавить к полученному числу новое значение
 0000009E  46			inc esi ; перейти на следующий символ
 0000009F  E2 EF		loop convert ; новая итерация цикла
 000000A1  A3 000000E6 R	mov numa, eax

				; вывод строки
 000000A6  68 00000008 R	push offset strn ; в стек помещается указатель на строку
 000000AB  E8 00000000 E	call lstrlenA@4
 000000B0  6A 00		push 0 ; в стек помещается 5-й параметр
 000000B2  68 000000E2 R	push offset lens ; 4-й параметр
 000000B7  50			push eax ; 3-й параметр
 000000B8  68 00000008 R	push offset strn ; 2-й параметр
 000000BD  FF 35 00000000 R	push dout ; 1-й параметр
 000000C3  E8 00000000 E	call WriteConsoleA@20

				; ввод строки
 000000C8  6A 00		push 0 ; в стек помещается 5-й параметр
 000000CA  68 000000E2 R	push offset lens ; 4-й параметр
 000000CF  68 000000C8		push 200 ; 3-й параметр
 000000D4  68 0000001A R	push offset buf ; 2-й параметр
 000000D9  FF 35 00000004 R	push din ; 1-й параметр
 000000DF  E8 00000000 E	call ReadConsoleA@20

				; обработка 2 строки
 000000E4  33 C0		xor eax, eax
 000000E6  68 0000001A R	push offset buf
 000000EB  83 2D 000000E2 R	sub lens, 2
	   02
 000000F2  8B 0D 000000E2 R	mov ecx, lens
 000000F8  BE 0000001A R	mov esi,offset buf ; начало строки хранится в переменной buf
 000000FD  33 DB		xor ebx, ebx ; очистить ebx
 000000FF  33 C0		xor eax, eax ; очистить eax
 00000101			convertb: ; метка начала цикла
 00000101  33 D2		xor edx,edx ; очистить edx
 00000103  B2 0A		mov dl, 10 ; на это число будем умножать, делаем в цикле т.к. при умножении dx затирается
 00000105  8A 1E		mov bl, [esi] ; помещаем символ из введенной строки в bl
 00000107  80 EB 30		sub bl, '0' ; вычитаем из введенного символа код нуля
 0000010A  66| F7 E2		mul dx ; умножаем старое значение bx на 10, результат – в ax
 0000010D  03 C3		add eax, ebx ; добавить к полученному числу новое значение
 0000010F  46			inc esi ; перейти на следующую строку
 00000110  E2 EF		loop convertb ; новая итерация цикла
 00000112  A3 000000EA R	mov numb, eax
				; сложение чисел
 00000117  A1 000000E6 R	mov eax, numa
 0000011C  8B 1D 000000EA R	mov ebx, numb
 00000122  03 C3		add eax, ebx
 00000124  A3 000000E6 R	mov numa, eax


				;0123

				;  23 - ax
				;  01 - dx
				;0123 - ebx

				; преобразование результата
 00000129  33 C9		xor ecx, ecx
 0000012B  33 D2		xor edx, edx
 0000012D  A1 000000E6 R	mov eax, numa
 00000132  BF 00000010		mov edi, 16
				.while eax>=edi ; пока число > 16
 00000139  F7 F7		div edi
 0000013B  66| 83 C2 30		add dx, '0'
.if dx>'9' ; если символ > 9, заменить на A,B,...
 00000145  66| 83 C2 07		add dx, 7
				.endif
 00000149  52			push edx ; кладем данные в стек, для инвертирования
 0000014A  41			inc ecx
 0000014B  33 D2		xor edx, edx
				.endw
 00000151  66| 83 C0 30		add ax, '0'
				.if ax>'9'
 0000015B  66| 83 C0 07		add ax, 7
				.endif
 0000015F  50			push eax
 00000160  41			inc ecx
				; теперь инвертируем строку
 00000161  BE 0000001A R	mov esi, offset buf ; начало строки хранится в переменной buf
 00000166			convertc:
 00000166  8F 06		pop [esi]
 00000168  46			inc esi
 00000169  E2 FB		loop convertc

				; выводим результат
 0000016B  68 0000001A R	push offset buf ; в стек помещается указатель на строку
 00000170  E8 00000000 E	call lstrlenA@4
 00000175  6A 00		push 0 ; в стек помещается 5-й параметр
 00000177  68 000000E2 R	push offset lens ; 4-й параметр
 0000017C  50			push eax ; 3-й параметр
 0000017D  68 0000001A R	push offset buf ; 2-й параметр
 00000182  FF 35 00000000 R	push dout ; 1-й параметр
 00000188  E8 00000000 E	call WriteConsoleA@20
				; выход из программы
 0000018D  6A 00		push 0 ; параметр: код выхода
 0000018F  E8 00000000 E	call ExitProcess@4
				end start
Microsoft (R) Macro Assembler Version 14.11.25547.0	    11/23/17 01:05:56
main.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000EE DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000194 DWord	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CharToOemA@8 . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
ExitProcess@4  . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
ReadConsoleA@20  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
buf  . . . . . . . . . . . . . .	Byte	 0000001A _DATA	
convertb . . . . . . . . . . . .	L Near	 00000101 _TEXT	
convertc . . . . . . . . . . . .	L Near	 00000166 _TEXT	
convert  . . . . . . . . . . . .	L Near	 00000090 _TEXT	
din  . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
dout . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
lens . . . . . . . . . . . . . .	DWord	 000000E2 _DATA	
lstrlenA@4 . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
numa . . . . . . . . . . . . . .	DWord	 000000E6 _DATA	
numb . . . . . . . . . . . . . .	DWord	 000000EA _DATA	
reenterA . . . . . . . . . . . .	L Near	 00000050 _TEXT	
start  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
strn . . . . . . . . . . . . . .	Byte	 00000008 _DATA	

	   0 Warnings
	   0 Errors
